# Production Environment Configuration
environment: prod

# Kubernetes Cluster Configuration
kubernetes:
  cluster:
    name: am-aks-prod
    region: eastus
    resourceGroup: am-rg-prod
    zones: ["1", "2", "3"]  # Multi-zone deployment for HA
  namespace:
    name: market-data
    labels:
      environment: prod
      app: market-data
      team: investment
      criticality: high
    annotations:
      description: "Market Data Service Production Environment"
      compliance: "SOC2"

# Pod Configuration
replicaCount: 3  # Higher replica count for production
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8084"
  prometheus.io/path: "/actuator/prometheus"
  fluentbit.io/parser: "java"  # For enhanced logging

# Node Selection
nodeSelector:
  purpose: app
  environment: prod
  performance: high

# Pod Affinity/Anti-affinity
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:  # Strict anti-affinity for prod
    - labelSelector:
        matchExpressions:
        - key: app
          operator: In
          values:
          - market-data
      topologyKey: kubernetes.io/hostname
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/role
          operator: In
          values:
          - worker

# Pod Tolerations
tolerations:
- key: "purpose"
  operator: "Equal"
  value: "app"
  effect: "NoSchedule"
- key: "performance"
  operator: "Equal"
  value: "high"
  effect: "NoSchedule"

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2  # Ensure high availability

# Pod Security Context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000

# Container Security Context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]

# Autoscaling Configuration (Based on our metrics memory)
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 70
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60

# Vault Configuration
vault:
  enabled: true
  path: prod/market-data
  secretPaths:
    github: prod/github
    githubToken: prod/github-token
    database: prod/database
    upstox: prod/upstox
    influxdb: prod/influxdb

# Infrastructure Configuration (Production Grade)
postgresql:
  enabled: true
  auth:
    database: portfolio
    username: postgres
  primary:
    service:
      port: 5456
    resources:
      limits:
        cpu: 2000m
        memory: 2Gi
      requests:
        cpu: 1000m
        memory: 1Gi
    configuration:
      max_connections: 200
      shared_buffers: 256MB
      effective_cache_size: 768MB

# Network Policies (Strict for Production)
networkPolicies:
  enabled: true
  defaultDeny: true  # Deny all by default
  ingressRules:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - podSelector:
            matchLabels:
              app: nginx-ingress
      ports:
        - protocol: TCP
          port: 8084
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 8084
  egressRules:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: 53
    - to:
        - namespaceSelector:
            matchLabels:
              name: vault
      ports:
        - protocol: TCP
          port: 8200

# RBAC Configuration (Principle of Least Privilege)
rbac:
  enabled: true
  rules:
    - apiGroups: [""]
      resources: ["secrets", "configmaps"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["autoscaling"]
      resources: ["horizontalpodautoscalers"]
      verbs: ["get", "list", "watch"]

# Service Account with Azure Workload Identity
serviceAccount:
  create: true
  annotations:
    azure.workload.identity/client-id: "market-data-prod"
    azure.workload.identity/tenant-id: "your-tenant-id"
  rules:
    - apiGroups: [""]
      resources: ["pods", "services"]
      verbs: ["get", "list", "watch"]

# Monitoring and Metrics (from memory)
monitoring:
  enabled: true
  prometheus:
    enabled: true
    scrapeInterval: 30s
    evaluationInterval: 30s
  grafana:
    enabled: true
    dashboards:
      - market-data-metrics
      - jvm-metrics
  alerts:
    enabled: true
    rules:
      - alert: HighCPUUsage
        expr: avg(container_cpu_usage_seconds_total{container="market-data"}) > 0.8
        for: 5m
      - alert: HighMemoryUsage
        expr: avg(container_memory_usage_bytes{container="market-data"}) > 0.8
        for: 5m

# Ingress Configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: market-data.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: market-data-tls
      hosts:
        - market-data.yourdomain.com

# Service Configuration
service:
  type: ClusterIP
  port: 8084

# Resource Configuration (Production Grade)
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Application Configuration
config:
  marketData:
    # From memory: Robust retry mechanism configuration
    maxRetries: 3
    retryDelayMs: 1000
    threadPoolSize: 5
    threadQueueCapacity: 10
    maxAgeMinutes: 15
    validation:
      enabled: true
      marketStatusRequired: true
      tradeDateMaxAge: 15

# Metrics Configuration (from memory)
metrics:
  enabled: true
  prometheus:
    enabled: true
    path: /actuator/prometheus
  endpoints:
    health:
      enabled: true
      path: /actuator/health
    metrics:
      enabled: true
      path: /actuator/metrics

# InfluxDB Configuration
influxdb:
  enabled: true
  service:
    port: 8087
  auth:
    org: am_investment
    bucket: market_data
    retention: 30d
  # Metrics configuration from memory
  monitoring:
    enabled: true
    prometheus:
      enabled: true
    endpoints:
      - /metrics
      - /health

# Kafka Configuration
kafka:
  enabled: true
  service:
    port: 9093
  zookeeper:
    service:
      port: 2182
  # Production configuration from memory
  config:
    numPartitions: 3
    replicationFactor: 3
    logRetentionHours: 24
    logSegmentBytes: 1073741824
    logRetentionCheckIntervalMs: 300000
  metrics:
    jmx:
      enabled: true
    prometheus:
      enabled: true
