apiVersion: batch/v1
kind: Job
metadata:
  name: vault-auth-test
  namespace: dev  # Change to your application namespace
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/auth-config-audience: "vault"  # Adding audience as per warning in logs
        vault.hashicorp.com/auth-config-issuer: "https://kubernetes.default.svc.cluster.local"
        vault.hashicorp.com/auth-config-disable-iss-validation: "true"
        vault.hashicorp.com/auth-config-disable-local-ca-jwt: "true"
        vault.hashicorp.com/role: "dev-role"
        vault.hashicorp.com/agent-pre-populate-only: "true"
        vault.hashicorp.com/agent-inject-secret-mongodb: "kv/preprod/database/mongo"
        vault.hashicorp.com/agent-inject-template-mongodb: |
          {{- with secret "kv/preprod/database/mongo" -}}
          MONGODB_URL="{{ .Data.data.url }}"
          MONGODB_DATABASE="{{ .Data.data.marketdtadatabase }}"
          MONGODB_USERNAME="{{ .Data.data.username }}"
          MONGODB_PASSWORD="{{ .Data.data.password }}"
          {{- end -}}
        vault.hashicorp.com/agent-inject-secret-redis: "kv/preprod/database/redis"
        vault.hashicorp.com/agent-inject-template-redis: |
          {{- with secret "kv/preprod/database/redis" -}}
          {{- $url := .Data.data.url -}}
          {{- $urlParts := split "://" $url -}}
          {{- $hostPort := index $urlParts 1 -}}
          {{- $hostPortParts := split ":" $hostPort -}}
          REDIS_URL="{{ $url }}"
          REDIS_HOST="{{ index $hostPortParts 0 }}"
          REDIS_PORT="{{ if eq (len $hostPortParts) 2 }}{{ index $hostPortParts 1 }}{{ else }}6379{{ end }}"
          REDIS_PASSWORD="{{ .Data.data.password }}"
          {{- end -}}
        vault.hashicorp.com/agent-inject-secret-kafka: "kv/preprod/kafka"
        vault.hashicorp.com/agent-inject-template-kafka: |
          {{- with secret "kv/preprod/kafka" -}}
          KAFKA_BOOTSTRAP_SERVERS="{{ .Data.data.bootstrapServers }}"
          KAFKA_ZOOKEEPER_CONNECT="{{ .Data.data.zookeeperConnect }}"
          {{- end -}}
        vault.hashicorp.com/agent-inject-secret-upstock: "kv/preprod/api/upstock"
        vault.hashicorp.com/agent-inject-template-upstock: |
          {{- with secret "kv/preprod/api/upstock" -}}
          UPSTOCK_API_BASE_URL="{{ .Data.data.apiBaseUrl }}"
          UPSTOCK_REDIRECT_URI="{{ .Data.data.redirectUri }}"
          UPSTOCK_ACCESS_TOKEN="{{ .Data.data.accesstoken }}"
          UPSTOCK_CODE="{{ .Data.data.authCode }}"
          {{- end -}}
        vault.hashicorp.com/agent-inject-secret-influxdb: "kv/preprod/database/influxdb"
        vault.hashicorp.com/agent-inject-template-influxdb: |
          {{- with secret "kv/preprod/database/influxdb" -}}
          INFLUXDB_URL="{{ .Data.data.url }}"
          INFLUXDB_TOKEN="{{ .Data.data.token }}"
          INFLUXDB_ORG="{{ .Data.data.org }}"
          INFLUXDB_BUCKET="{{ .Data.data.bucket }}"
          {{- end -}}
    spec:
      serviceAccountName: vault-auth  # Same service account as your application
      containers:
      - name: vault-auth-test
        image: busybox:latest
        command:
        - "/bin/sh"
        - "-c"
        - |
          echo "Starting Vault authentication test..."
          echo "Checking for Vault token..."
          if [ -f /var/run/secrets/kubernetes.io/serviceaccount/token ]; then
            echo "Service account token exists"
          else
            echo "Service account token missing!"
          fi
          
          echo "\n=== MongoDB Secrets ==="
          if [ -f /vault/secrets/mongodb ]; then
            echo "MongoDB secrets were injected successfully:"
            cat /vault/secrets/mongodb
          else
            echo "MongoDB secrets were not injected!"
          fi
          
          echo "\n=== Redis Secrets ==="
          if [ -f /vault/secrets/redis ]; then
            echo "Redis secrets were injected successfully:"
            cat /vault/secrets/redis
          else
            echo "Redis secrets were not injected!"
          fi
          
          echo "\n=== Kafka Secrets ==="
          if [ -f /vault/secrets/kafka ]; then
            echo "Kafka secrets were injected successfully:"
            cat /vault/secrets/kafka
          else
            echo "Kafka secrets were not injected!"
          fi
          
          echo "\n=== Upstock Secrets ==="
          if [ -f /vault/secrets/upstock ]; then
            echo "Upstock secrets were injected successfully:"
            cat /vault/secrets/upstock
          else
            echo "Upstock secrets were not injected!"
          fi
          
          echo "\n=== InfluxDB Secrets ==="
          if [ -f /vault/secrets/influxdb ]; then
            echo "InfluxDB secrets were injected successfully:"
            cat /vault/secrets/influxdb
          else
            echo "InfluxDB secrets were not injected!"
          fi
              
              # Try to extract values using grep and sed
              echo "MongoDB URL:"
              grep -o '".*url.*"' /vault/secrets/test || echo "URL not found"
              
              echo "MongoDB Database:"
              grep -o '".*marketdtadatabase.*"' /vault/secrets/test || echo "Database not found"
              
              echo "MongoDB Username:"
              grep -o '".*username.*"' /vault/secrets/test || echo "Username not found"
              
              echo "MongoDB Password:"
              grep -o '".*password.*"' /vault/secrets/test || echo "Password not found"
              
              # Try to source the file if it contains actual values
              if grep -q "=" /vault/secrets/test; then
                echo "\n=== Environment Variables from Secret ==="
                # Export variables from the file
                export $(grep -v '^#' /vault/secrets/test | xargs) 2>/dev/null
                echo "MONGODB_URL: ${MONGODB_URL:-not set}"
                echo "MONGODB_DATABASE: ${MONGODB_DATABASE:-not set}"
                echo "MONGODB_USERNAME: ${MONGODB_USERNAME:-not set}"
                echo "MONGODB_PASSWORD: ${MONGODB_PASSWORD:-not set}"
              fi
            else
              echo "Secret file does not contain expected template variables"
            fi
          else
            echo "Secret injection failed! Directory contents:"
            ls -la /vault/secrets/ || echo "Vault secrets directory doesn't exist"
          fi
          
          echo "\n=== Vault Secrets Directory Contents ==="
          ls -la /vault/secrets/ || echo "Vault secrets directory doesn't exist"
          
          echo "\n=== Environment Information ==="
          printenv | grep -i vault || echo "No Vault environment variables found"
          
          echo "Test complete"
          sleep 30  # Keep container running briefly for debugging
      restartPolicy: Never
  backoffLimit: 0
